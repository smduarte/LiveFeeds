package sensing.persistence.simsim.speedsense.map;
import static sensing.persistence.simsim.PipelineSimulation.display;
import sensing.persistence.core.network.Peer;
import sensing.persistence.core.network.NetworkService;
import sensing.persistence.core.sensors.GPSReading;
import static sensing.persistence.core.logging.LoggingProvider.*;
import sensing.persistence.simsim.Node;
import simsim.core.Simulation;
import simsim.core.PeriodicTask;
import static simsim.core.Simulation.rg;
import simsim.gui.canvas.*;
import simsim.gui.geom.*;

import org.openstreetmap.josm.data.coor.*;

import java.awt.Color;
import java.awt.Point;
import java.util.UUID;

public class MobileNode {
	Node homeBase;
	final UUID id;
	protected TrafficSpeedModel  speedSenseModel = SpeedSenseSim.speedSenseModel;
	protected route;
	protected int cSegmentIdx;  // current way segment index
	protected cSegment;			// current way segment 
	protected cSegmentId;		// current speed model segment id
	protected double cSegDist;  // current segment distance in m
	protected double p; 		// position in segment as fraction
	protected double cSpeed; 	// current speed km/h
	protected double cRealSpeed; // debug;
	protected double cDensity;  // current segment density - for debug
	protected double cTs; 		// current timestamp
	protected double cLat;
	protected double cLon;
	protected SGPSReading r = new SGPSReading(mNodeId: id);
	Peer sensorDest;
	
	public MobileNode() {
		this.id = UUID.randomUUID();
	}

	public void init() {
		setRoute();
		new PeriodicTask(rg.nextInt(SpeedSenseSim.setup.SAMPLING_RATE), SpeedSenseSim.setup.SAMPLING_RATE) {
			public void run() {
				if(homeBase.isOnline() ) {
					r.lat 		= cLat;
					r.lon 		= cLon;
					r.segmentId = cSegmentId;
					r.speed 	= cSpeed;
					r.time 		= homeBase.currentTime();
					sensorDest = homeBase.sensorInput(r);
					if(sensorDest) {
						SpeedSenseSim.setup.addActiveSegment(cSegmentId);
						SpeedSenseSim.setup.activeMobileNodes.add(this);
					} else {
						SpeedSenseSim.setup.activeMobileNodes.remove(this);
					}		
				} /*else {
					SpeedSenseSim.registerMobileNode(this);
				} */
			}
		}
	}
	
	protected static cachedRoutes = [];
	protected void setRoute() {
		if(SpeedSenseSim.setup.ROUTE_CACHE_SIZE == 0) {_setRoute(); return}
		if(cachedRoutes.size() < SpeedSenseSim.setup.ROUTE_CACHE_SIZE) {
			route = findRoute();
			assert(route);
			cachedRoutes << route;
		} else {
			route = cachedRoutes[SpeedSenseSim.rg.nextInt(SpeedSenseSim.setup.ROUTE_CACHE_SIZE)];
		}
		initRoute();
	}

	protected void _setRoute() {
		def start = route ? route.last().end : null;
		route = [];
		route = findRoute(start);
		if(!route && start) {
			route = findRoute(null);
		}
		assert(route);
		initRoute();
	}
	
	protected void initRoute() {
		cSegmentIdx = SpeedSenseSim.rg.nextInt(route.size());
		initSegment();
		cTs = Simulation.currentTime();		
	}
	
	protected void initSegment() {
		cSegment = route[cSegmentIdx];
		p = 0;
		//cSegmentId = speedSenseModel.getSegmentId(cSegment, cSegment.start.coor);
		cSegmentId = speedSenseModel.getSegmentId(cSegment, 0);
		cSpeed = speedSenseModel.getSpeed(cSegment, cSegmentId, this);
//		cRealSpeed =  speedSenseModel.getSegmentSpeed(cSegment.way, cSegmentId);
//		cDensity = speedSenseModel.getAverageDensity(cSegmentId);
		cLat = cSegment.start.coor.lat();
		cLon = cSegment.start.coor.lon();
		cSegDist = -1;
	}

	protected findRoute(start) {
		int nInter = 0;
		int nTries = 0;
		def rRoute;
		while(nInter < SpeedSenseSim.setup.ROUTE_MIN_SIZE && nTries<100) {
			rRoute =  SpeedSenseSim.mapModel.getRandomRoute(start, SpeedSenseSim.setup.ROUTE_SIZE);
			nInter = rRoute.nInter;
			nTries++;
		}
		return rRoute.route;
	}
	
	protected XY cachedPos;
	public XY getPos() {
		if(!cachedPos) {
			Point p = SpeedSenseSim.mapView.getPoint(new CachedLatLon(cLat, cLon));
			cachedPos = new XY(p.x, p.y);
		}
		return cachedPos;
	}
	
	public void updatePosition() {
		double ts = Simulation.currentTime();
		double travelT = ts-cTs;
		cachedPos=null;
		while(travelT > 0) {
			double speedMs = cSpeed * 0.277777778 //1000 / 3600; // speed in m/s
			// calc travelled distance, based on previous recorded speed cSpeed
			double dm = travelT * speedMs;
			if(cSegDist < 0) {
				cSegDist = cSegment.start.coor.greatCircleDistance(cSegment.end.coor);
			}
			double r = (1-p)*cSegDist; //remaining distance in current OSM segment
			if(dm <= r) { // still in same OSM segment
				p = (cSegDist-(r-dm))/cSegDist; // update position in segment
				// interpolate
				double sLat =  cSegment.start.coor.lat();
				double sLon =  cSegment.start.coor.lon();
				cLat = sLat + p * (cSegment.end.coor.lat() - sLat);
				cLon = sLon + p * (cSegment.end.coor.lon() - sLon);
				cSegmentId = speedSenseModel.getSegmentId(cSegment, p*cSegDist);
				cSpeed = speedSenseModel.getSpeed(cSegment, cSegmentId, this);
	//			cRealSpeed =  speedSenseModel.getSegmentSpeed(cSegment.way, cSegmentId);
	//			cDensity = speedSenseModel.getAverageDensity(cSegmentId);
				break;
			}
			double segT = r/speedMs; // time taken on this segment
			cSegmentIdx++;
			if(route.size() == cSegmentIdx) {
				sensorDest = null;
				setRoute();
				return;
			} else {
				initSegment();
			}
			travelT -= segT;
		}	
		cTs = ts;
	}
	

	static Pen sensorPen = new Pen(RGB.GRAY,1,5);
	static Pen segmentExtentPen = new Pen(RGB.MAGENTA, 1, 5);
	
	public void displayOn(Canvas c) {
		RGB statusColor;
		if(speedSenseModel.isCongested(cSegmentId, cSpeed)) {
			statusColor = RGB.RED;
		} else {
			statusColor = RGB.GREEN;
		}
		XY cPosXY = getPos();
		if(homeBase.debugNode) {
			c.sFill( statusColor, new Circle(cPosXY.x, cPosXY.y, 20));
		} else {
			c.sFill( statusColor, new Rectangle(cPosXY.x, cPosXY.y, 6.0, 6.0));
		}
		if(display.gps) displayGps(c);
	}

	protected void displayGps(Canvas c) {
		if(sensorDest) {
			XY cPosXY = getPos();
			c.sDraw(sensorPen, new Line(cPosXY.x, cPosXY.y, sensorDest.pos.x, sensorDest.pos.y));
		}		
	}
	
	public void displayDetailOn(Canvas c) {
		displayGps(c);
		if(display.segmentExtent) {
			Rectangle extent = speedSenseModel.getSegmentExtent(cSegmentId);
			if(extent) {
				Rectangle sExtent = SpeedSenseSim.mapView.latLonBoundsToScreen(extent);
				c.sDraw(segmentExtentPen, sExtent);	
				c.sFont(15);
				c.sDraw(homeBase.labelPen, cSegmentId, sExtent.x, sExtent.y-5);	
			}
		}
	}
	
	public invalidateDisplay() {
		cachedPos = null;
	}
	


	
	

}
